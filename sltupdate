#!/bin/bash

usage()
{
cat << EOF
usage: $0 options

Sublime Text build installer.

OPTIONS:
   -h      Show this message
   -b      Specify build number
   -l      Location to install. default: $HOME/Applications on Mac OS X or `pwd` on Linux (TODO)
   -B      Install the Sublime Text TextMate Bundle
   -I      Install a better icon.
   -P      Install the Sublime Text Package Control Manager
   -V      Specify Sublime Text version
EOF
}

function download() {
  url=$1
  filename=$2

  echo "curling $url"
  if [ "$filename" == "1" ]; then
    curl -O -L $url
  else
    wget $url -O $filename
    #curl -L $url -o $filename 
  fi
}

build=
location=
sublimebundle=false
bettericon=false
packagecontrol=false
version=2

while getopts “hb:l:BIPV:” OPTION
do
     case $OPTION in
         h)
             usage
             exit 1
             ;;
         b)
             build=$OPTARG
             ;;
         l)
             location=$OPTARG
             ;;
         B)
             sublimebundle=true
             ;;
         I)
             bettericon=true
             ;;
         P)
             packagecontrol=true
             ;;
	 V)
             version=$OPTARG
             ;;
         ?)
             usage
             exit
             ;;
     esac
done

if [[ -z ${build} ]] 
then
     usage
     exit 1
fi

if [ "${build}" -le "2095" ]
then
  echo "Sublime Text build 2095 and older have a bug with threading that will cause the editor to crash."
  echo "Please be sure you are running Sublime Text 2 build 2096 or newer. Older versions had issues with the program crashing when a package was reloaded or removed."
  exit
fi

url_path=http://c758482.r82.cf2.rackcdn.com/
if [ "$version" = "2" ]; then
  file_pattern="Sublime%20Text%202%20Build%20"
else
  file_pattern="Sublime%20Text%20Build%20"
fi
hardware=`uname -m`
os=`uname -s`

set -u

export file_get=$file_pattern$build

if [ "${hardware}" = "x86_64" ]
then
  if [ "${os}" = "Darwin" ]
  then
    export file_get=$file_get
  else
    export file_get="$file_get%20x64" 
  fi
else
  export file_get=$file_get
fi

if [ "${os}" = "Linux" ]
then
  export ext=.tar.bz2
  if [ "${location}" = "" ]
  then
    echo TODO: I need to figure where to put this on Linux
    location=`pwd`
  fi
elif [ "${os}" = "Darwin" ]
then
  export ext=.dmg
  if [ "${location}" = "" ]
  then
    location=$HOME/Applications
  fi
fi
export file_get=$file_get$ext

pushd $location

build_filename=$build.dmg

download "$url_path$file_get" $build_filename

if [ "${bettericon}" = "true" ]
then
  echo "Downloading the better icon."
  download http://www.sublimetext.com/forum/download/file.php?id=200 better_icon.zip
  unzip -o -q better_icon.zip
  rm -rf __MACOSX
  rm better_icon.zip
  echo "Done."
fi

if [ -e sublime$version ]
then
  echo An older version was found.  Deleting it.
  rm -rf sublime$version*
fi

if [ "${os}" = "Linux" ]
then
  tar jxvf "$file_get"
  mv "Sublime Text $version" sublime$version-$build
  ln -s sublime$version-$build sublime$version
  rm *.bz2
  if [ "${sublimebundle}" = "true" ]
  then
    if [ ! -e $HOME/.Sublime\ Text\ $version/Installed\ Packages/CoffeeScript.sublime-package ]
    then
      echo Installing the Sublime Text $version TextMate Bundle
      git clone https://github.com/jashkenas/coffee-script-tmbundle.git
      pushd coffee-script-tmbundle
      zip -r CoffeeScript.sublime-package *
      mv CoffeeScript.sublime-package $HOME/.Sublime\ Text\ $version/Installed\ Packages
      popd
      rm -rf coffee-script-tmbundle
    fi
  fi
  if [ "${bettericon}" = "true" ]
  then
    echo "Not yet implemented on linux.  Not sure where put the icon file."
  fi
  if [ "${packagecontrol}" = "true" ]
  then
    if [ ! -e $HOME/.Sublime\ Text\ $version/Installed\ Packages/Package\ Control.sublime-package ]
    then
      echo Intalling the Sublime Text $version Package Control Manager
      git clone https://github.com/wbond/sublime_package_control.git 
      pushd sublime_package_control
      zip -r Package\ Control.sublime-package *
      mv Package\ Control.sublime-package $HOME/.Sublime\ Text\ $version/Installed\ Packages
      popd
      rm -rf sublime_package_control
    fi
  fi
else
  hdiutil mount $build_filename
  #hdiutil mount "$file_get"
  mkdir -p sublime$version-$build
  if [ "$version" = "2" ]; then
    cp -Rp /Volumes/Sublime\ Text\ $version/Sublime\ Text\ $version.app sublime$version-$build/Sublime\ Text\ $version.app
    hdiutil unmount /Volumes/Sublime\ Text\ $version
  else
    cp -Rp /Volumes/Sublime\ Text/Sublime\ Text.app sublime$version-$build/Sublime\ Text.app
    hdiutil unmount /Volumes/Sublime\ Text
  fi
  ln -s sublime$version-$build sublime$version
  rm *.dmg
  if [ "${sublimebundle}" = "true" ]
  then 
    if [ ! -e $HOME/Library/Application\ Support/Sublime\ Text\ $version/Packages/CoffeeScript ]
    then
      echo Installing the Sublime Text $version TextMate Bundle
      pushd $HOME/Library/Application\ Support/Sublime\ Text\ $version/Packages
        git clone https://github.com/jashkenas/coffee-script-tmbundle.git CoffeeScript
      popd
    fi
  fi
  if [ "${bettericon}" = "true" ]
  then
    if [ "$version" = "2" ]; then
      cp -p Sublime\ Text\ 2.icns sublime$version/Sublime\ Text\ $version.app/Contents/Resources 
    else
      cp -p Sublime\ Text\ 2.icns sublime$version/Sublime\ Text.app/Contents/Resources
    fi
    rm Sublime\ Text\ 2.icns
  fi
  if [ "${packagecontrol}" = "true" ]
  then
    if [ ! -e $HOME/Library/Application\ Support/Sublime\ Text\ $version/Packages/Package\ Control ]
    then
      echo Intalling the Sublime Text $version Package Control Manager
      pushd $HOME/Library/Application\ Support/Sublime\ Text\ $version/Packages
      git clone https://github.com/wbond/sublime_package_control.git Package\ Control
      popd
    fi
  fi
fi

popd

echo You may need to restart Sublime Text $version for changes to take effect.
